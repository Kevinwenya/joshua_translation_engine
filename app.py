import argparse
import os
import socket
import subprocess
import sys
from flask import Flask
from flask.ext.restful import reqparse, Api, Resource
app = Flask(__name__)
api = Api(app)

http_parser = reqparse.RequestParser()
http_parser.add_argument('inputText', type=str, location='json')
http_parser.add_argument('inputLanguage', type=str, location='json')

decoders = {}


class Decoder(object):
    def __init__(self, bundle_dir):
        self._bundle_dir = bundle_dir
        source, target = self._extract_source_target_langs(bundle_dir)
        self._source_lang, self._target_lang = source, target
        self._start_decoder_server()

    @property
    def bundle_dir(self):
        return self._bundle_dir

    @property
    def source_lang(self):
        return self._source_lang

    @property
    def target_lang(self):
        return self._target_lang

    def translate(self, input_text):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(('localhost', 5674))
        sock.send('%s\n' % input_text)
        result = sock.recv(1024)
        return {'outputText': '"%s" is a translation from %s into %s of %s' %
                (result, self.source_lang, self.target_lang, input_text)}

    def _start_decoder_server(self):
        runner_path = os.path.join(self.bundle_dir, 'run-joshua.sh')
        subprocess.Popen([runner_path], env=os.environ)

    def _extract_source_target_langs(self, bundle_dir):
        """
        Read the joshua.config file in the bundle_dir, parse the key-value
        pairs, extract the values of the source and target variables, and
        return them.
        """
        config_file_path = os.path.join(self.bundle_dir, 'joshua.config')

        with open(config_file_path) as fh:
            cfg = fh.read()

        cfg_items = [
            (kv[0].strip(), kv[1].strip)
            for line in cfg.split('\n')
            for kv in line.split('=')
            if '=' in line
        ]

        for key, val in cfg_items:
            if key == 'source':
                source = val
            if key == 'target':
                target = val

        return source, target


class TranslationEngine(Resource):
    def post(self, target_lang):
        args = http_parser.parse_args()
        source_lang = args['inputLanguage']
        input_text = args['inputText']
        lang_pair = (source_lang, target_lang.capitalize())
        print source_lang
        print input_text
        translation = decoders[lang_pair].translate(input_text)
        return translation, 201


def handle_cli_args(argv):
    """
    Process all the command-line args (e.g. from sys.argv).
    """
    program_name = argv.pop(0)
    remaining_args = argv
    cli_parser = argparse.ArgumentParser(
        prog=program_name,
        usage='%(prog)s [options]\n'
              'Specify at least one bundle and source and target languages '
              'for each bundle.\n',
        description='Start a translation engine server.'
    )
    cli_parser.add_argument(
        '--bundle-dir',
        nargs='+',
        help="path to directory generated by Joshua's run_bundler.py script",
    )
    cli_parser.add_argument(
        '--source-lang',
        nargs='+',
        default=[],
        help='the language of the input text',
    )
    cli_parser.add_argument(
        '--target-lang',
        nargs='+',
        default=[],
        help='the language of the input text',
    )

    if not remaining_args:
        sys.stderr.write(
            'ERROR: at least one bundle and its source and target languages '
            'should be specified.\n'
        )
        cli_parser.print_help()
        sys.exit(2)

    parsed_args = cli_parser.parse_args(remaining_args)

    num_bundles = len(parsed_args.bundle_dir)
    if (
            len(parsed_args.source_lang) != num_bundles
            or
            len(parsed_args.target_lang) != num_bundles
        ):
        sys.stderr.write(
            'ERROR: For each bundle, source and target languages must be '
            'specified.\n'
        )
        cli_parser.print_help()
        sys.exit(2)

    return parsed_args

api.add_resource(TranslationEngine, '/joshua/translate/<string:target_lang>')

if __name__ == '__main__':

    for bundle in handle_cli_args(sys.argv).bundle_dir:
        decoder = Decoder(bundle)
        lang_pair = (decoder.source_lang, decoder.target_lang)
        decoders[lang_pair] = decoder

    app.run(debug=True, use_reloader=False)
    #app.run()
